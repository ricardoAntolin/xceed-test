def addRepos(RepositoryHandler handler) {
    handler.jcenter()
    handler.mavenCentral()
    handler.google()
}

ext.addRepos = this.&addRepos

def build_versions = [:]
build_versions.min_sdk = 21
build_versions.target_sdk = 29
build_versions.build_tools = "29.0.3"
ext.build_versions = build_versions


def versions = [:]

/** Androidx **/
def androidx_versions = [:]
androidx_versions.stable = "1.1.0"
androidx_versions.stable_2 = "1.2.0"
androidx_versions.arch = "2.1.0"
androidx_versions.lifecycle = "2.2.0"
versions.androidx = androidx_versions

/** Google **/
versions.dagger = "2.27"
versions.google_services_plugin = "4.3.3"
versions.material = "1.1.0"

/** Kotlin **/
versions.kotlin = "1.3.71"

/** Gradle **/
versions.android_gradle_plugin = "3.6.3"

//Unit Testing
versions.robolectric = '4.0.2'
versions.junit = '4.12'
versions.kluent = '1.44'
versions.mockito = '2.23.4'
versions.android_test_core = '1.0.0'
versions.mockito2 = "2.2.0"

//Acceptance Testing
versions.runner = '1.1.0'
versions.espresso = '3.1.0'
versions.uiautomator = '2.2.0'

//Third party libraries
versions.realm = "5.8.0"
versions.realm_fields_names_helper = "1.1.1"
versions.retrofit = "2.5.0"
versions.ok_http = "4.5.0"
versions.mockwebserver = versions.ok_http
versions.rxjava2 = "3.0.2"
versions.rxandroid = "3.0.0"
versions.rxkotlin = "3.0.0"
versions.javaxInjectVersion = "1"
versions.javaxAnnotationVersion = "1.0"
versions.glide = "4.11.0"

def kotlin = [:]
kotlin.stdlib = "org.jetbrains.kotlin:kotlin-stdlib:$versions.kotlin"
kotlin.test = "org.jetbrains.kotlin:kotlin-test-junit:$versions.kotlin"
kotlin.plugin = "org.jetbrains.kotlin:kotlin-gradle-plugin:$versions.kotlin"
kotlin.extensions = "org.jetbrains.kotlin:kotlin-android-extensions:$versions.kotlin"

def androidx = [:]
androidx.appcompat = "androidx.appcompat:appcompat:$versions.androidx.stable"
androidx.ktx = "androidx.core:core-ktx:$versions.androidx.stable"
androidx.annotations = "androidx.annotation:annotation:$versions.androidx.stable"
androidx.recyclerview = "androidx.recyclerview:recyclerview:$versions.androidx.stable"
androidx.transition = "androidx.transition:transition:$versions.androidx.stable"
androidx.java8 = "androidx.lifecycle:lifecycle-common-java8:$versions.androidx.lifecycle"
androidx.viewmodel = "androidx.lifecycle:lifecycle-viewmodel-ktx:$versions.androidx.lifecycle"
androidx.livedata = "androidx.lifecycle:lifecycle-livedata-ktx:$versions.androidx.lifecycle"
androidx.runtime_extensions = "androidx.lifecycle:lifecycle-runtime-ktx:$versions.androidx.lifecycle"
androidx.livedata_extensions = "androidx.lifecycle:lifecycle-livedata-ktx:$versions.androidx.lifecycle"
androidx.compiler = "androidx.lifecycle:lifecycle-compiler:$versions.androidx.lifecycle"
androidx.activity = "androidx.activity:activity-ktx:$versions.androidx.stable"
androidx.fragment = "androidx.fragment:fragment-ktx:$versions.androidx.stable_2"

def rx = [:]
rx.rxjava2 = "io.reactivex.rxjava3:rxjava:$versions.rxjava2"
rx.rxandroid = "io.reactivex.rxjava3:rxandroid:$versions.rxandroid"
rx.rxkotlin = "io.reactivex.rxjava3:rxkotlin:$versions.rxkotlin"

def google_services = [:]
google_services.plugin = "com.google.gms:google-services:$versions.google_services_plugin"

def dagger = [:]
dagger.runtime = "com.google.dagger:dagger:$versions.dagger"
dagger.android = "com.google.dagger:dagger-android-support:$versions.dagger"
dagger.compiler = "com.google.dagger:dagger-compiler:$versions.dagger"
dagger.processor = "com.google.dagger:dagger-android-processor:$versions.dagger"

def retrofit = [:]
retrofit.runtime = "com.squareup.retrofit2:retrofit:$versions.retrofit"
retrofit.gson = "com.squareup.retrofit2:converter-gson:$versions.retrofit"
retrofit.rx = "com.squareup.retrofit2:adapter-rxjava2:$versions.retrofit"
retrofit.loggin_interceptor = "com.squareup.okhttp3:logging-interceptor:$versions.ok_http"
retrofit.mock = "com.squareup.retrofit2:retrofit-mock:$versions.retrofit"

def test = [:]
test.junit = "junit:junit:$versions.junit"
test.arch = "androidx.arch.core:core-testing:$versions.androidx.arch"
test.ui_junit = "androidx.test.ext:junit:$versions.android_test_core"
test.espresso_core = "androidx.test.espresso:espresso-core:$versions.espresso"
test.espresso_contrib = "androidx.test.espresso:espresso-contrib:$versions.espresso"
test.espresso_intents = "androidx.test.espresso:espresso-intents:$versions.espresso"
test.runner = "androidx.test:runner:$versions.runner"
test.core = "androidx.test:core:$versions.android_test_core"
test.orchestator = "androidx.test:orchestrator:$versions.android_test_core"
test.rules = "androidx.test:rules:$versions.runner"
test.uiautomator = "androidx.test.uiautomator:uiautomator:$versions.uiautomator"
test.mockito2 = "com.nhaarman.mockitokotlin2:mockito-kotlin:$versions.mockito2"
test.mockwebserver = "com.squareup.okhttp3:mockwebserver:$versions.mockwebserver"

def firebase = [:]
firebase.analytics = "com.google.firebase:firebase-analytics:$versions.firebase_analytics"
firebase.crashlytics = "com.crashlytics.sdk.android:crashlytics:$versions.firebase_crashlytics"

def third_party = [:]
third_party.material = "com.google.android.material:material:$versions.material"
third_party.javaxAnnotation = "javax.annotation:jsr250-api:$versions.javaxAnnotationVersion"
third_party.javaxInject = "javax.inject:javax.inject:$versions.javaxInjectVersion"
third_party.glide = "com.github.bumptech.glide:glide:$versions.glide"
third_party.glide_processor = "com.github.bumptech.glide:compiler:$versions.glide"

ext.android_gradle_plugin = "com.android.tools.build:gradle:$versions.android_gradle_plugin"
ext.realm_plugin = "io.realm:realm-gradle-plugin:$versions.realm"
ext.google_services_plugin = google_services.plugin
ext.kotlin_plugin = kotlin.plugin
ext.kotlin_extensions = kotlin.extensions

def modules = [:]
modules.data = ':data'
modules.domain = ':domain'
modules.realmprovider = ':realmprovider'
modules.networkprovider = ':networkprovider'

def unit_test_common = [
        [configuration: "testImplementation", dependency: test.junit],
        [configuration: "testImplementation", dependency: test.mockito2],
        [configuration: "testImplementation", dependency: kotlin.test]
]

def common = [
        [configuration: "implementation", dependency: rx.rxjava2],
        [configuration: "implementation", dependency: rx.rxkotlin],
        [configuration: "implementation", dependency: kotlin.stdlib]
]

def realm_provider_dependencies = [
        [configuration: "kapt", dependency: "dk.ilios:realmfieldnameshelper:$versions.realm_fields_names_helper"],
        [configuration: "implementation", dependency: rx.rxandroid],
        [configuration: "implementation", dependency: third_party.javaxAnnotation],
        [configuration: "implementation", dependency: third_party.javaxInject],
        [configuration: "implementation", dependency: project(modules.data)]
]
realm_provider_dependencies.addAll(common)
realm_provider_dependencies.addAll(unit_test_common)
ext.realm_provider_dependencies = realm_provider_dependencies

def network_provider_dependencies = [
        [configuration: "kapt", dependency: "dk.ilios:realmfieldnameshelper:$versions.realm_fields_names_helper"],
        [configuration: "implementation", dependency: project(modules.data)],
        [configuration: "implementation", dependency: third_party.javaxAnnotation],
        [configuration: "implementation", dependency: third_party.javaxInject],
        [configuration: "testImplementation", dependency: test.mockwebserver]
]
network_provider_dependencies.addAll(common)
network_provider_dependencies.addAll(unit_test_common)
ext.network_provider_dependencies = network_provider_dependencies

def data_dependencies = [
        [configuration: "implementation", dependency: third_party.javaxAnnotation],
        [configuration: "implementation", dependency: third_party.javaxInject],
        [configuration: "implementation", dependency: project(modules.domain)]
]
data_dependencies.addAll(common)
data_dependencies.addAll(unit_test_common)
ext.data_dependencies = data_dependencies

def domain_dependencies = [
        [configuration: "implementation", dependency: third_party.javaxAnnotation],
        [configuration: "implementation", dependency: third_party.javaxInject],
]
domain_dependencies.addAll(common)
domain_dependencies.addAll(unit_test_common)
ext.domain_dependencies = domain_dependencies

def presentation_dependencies = [
        [configuration: "implementation", dependency: project(modules.domain)],
        [configuration: "implementation", dependency: project(modules.data)],
        [configuration: "implementation", dependency: project(modules.realmprovider)],
        [configuration: "implementation", dependency: project(modules.networkprovider)],
        [configuration: "implementation", dependency: rx.rxandroid],
        [configuration: "implementation", dependency: androidx.appcompat],
        [configuration: "implementation", dependency: androidx.annotations],
        [configuration: "implementation", dependency: androidx.recyclerview],
        [configuration: "implementation", dependency: androidx.transition],
        [configuration: "implementation", dependency: androidx.java8],
        [configuration: "implementation", dependency: androidx.viewmodel],
        [configuration: "implementation", dependency: androidx.livedata],
        [configuration: "implementation", dependency: androidx.runtime_extensions],
        [configuration: "implementation", dependency: androidx.livedata_extensions],
        [configuration: "kapt", dependency: androidx.compiler],
        [configuration: "implementation", dependency: androidx.activity],
        [configuration: "implementation", dependency: androidx.fragment],
        [configuration: "implementation", dependency: dagger.runtime],
        [configuration: "implementation", dependency: dagger.android],
        [configuration: "implementation", dependency: third_party.material],
        [configuration: "kapt", dependency: dagger.compiler],
        [configuration: "kapt", dependency: dagger.processor],
        [configuration: "implementation", dependency: rx.rxandroid],
        [configuration: "implementation", dependency: third_party.glide],
        [configuration: "kapt", dependency: third_party.glide_processor],
        [configuration: "testImplementation", dependency: dagger.runtime]
]
presentation_dependencies.addAll(common)
presentation_dependencies.addAll(unit_test_common)
ext.presentation_dependencies = presentation_dependencies
